package _map

import (
	"fmt"
	"log"
	"os"
	"text/template"
	"time"
)



var wrapperTemplate = template.Must(template.New("").Parse(`
// Code generated by go generate; DO NOT EDIT.
// This file was generated by koazee at
// {{ .Timestamp }}
package map

{{- range .Types }}
func reduceIntToInt(items []int, fn func(int, int) int) int {
	acc := 0
	for _, item := range items {
		acc = fn(acc, item)
	}
	return acc
}
{{- end }}
`))

func GenerateWrapper(outputPath string) {
	f, err := os.Create(fmt.Sprintf("%s/wrapper.go", outputPath))
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	wrapperTemplate.Execute(f, struct {
		Timestamp time.Time
		Types     []string
	}{
		Timestamp: time.Now(),
		Types: []string{
			"string",
			"int",
			"int8",
			"int16",
		},
	})

}
